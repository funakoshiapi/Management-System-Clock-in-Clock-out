@inject ContextForDB dbcontext

<MudItem Style="text-align:center;" md="12">
    <p>You are currently working in: @dbcontext.FarmBuildingsTable.ToList().FirstOrDefault(w => w.Id.ToString() == log.Building,new TableModels.FarmBuildingsTable()).BuildingTitle</p>
    <p>Your current job is: @dbcontext.FarmJobsTable.ToList().FirstOrDefault(j => j.Id.ToString() == log.Job, new TableModels.FarmJobsTable()).JobTitle</p>
    <p>You started at: @log.DateStarted</p> 
    <p><MudButton OnClick="@EndJob" Variant="@Variant.Filled">End job</MudButton></p>
    <p style="color:red;" >@error</p>
</MudItem>
 
@code
{
    [Parameter]
    public EventCallback OnEndJob { get; set; }

    
    [Parameter]
    public string UserId { get; set; }

    TableModels.WorkLogsTable log;

    string error;



    protected override async Task OnInitializedAsync()
    {
        try
        {
            log =  dbcontext.WorkLogsTable.ToList().First(w => w.Worker == UserId  && w.DateEnded == null); 
        }
        catch (Exception e)
        {
            await  OnEndJob.InvokeAsync();
        }
    }

    

    async Task EndJob()
    {
        try
        {
            dbcontext.WorkLogsTable.Single(w => w.Id == log.Id).DateEnded = DateTime.UtcNow;

            int changes =  dbcontext.SaveChanges();
            if (changes == 1)
            {
               await OnEndJob.InvokeAsync();
            }
            else
            {
                 error = "Unable to end";
            }
        }
            catch (Exception e)
            {
                error = "Unable to end";
            }
    }

}